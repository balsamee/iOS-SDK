//
//  BalsameeAPIs
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import "PlacesController.h"

@implementation PlacesController

/**
* # URL         => /places
*   # Method      => GET
*   # Description => return regions of country text search with type in that country
*   #==Parameters
*   # headers['X-Authentication-Token']
*   # headers['X-Session-Id']
*   # headers['X-App-Id']
*   # params[:latitude]
*   # params[:longitude]
*   # params[:type] : clinic or hospital ... etc
*   #==Response/JSON
*   # { data: {} }, status: :ok
* @param    latitude    Required parameter: Example: 
* @param    longitude    Required parameter: Example: 
* @param    type    Required parameter: Example: 
* @param    lang    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5PlacesGetAsyncWithLatitude:(double) latitude
                longitude:(double) longitude
                type:(NSString*) type
                lang:(NSString*) lang
                completionBlock:(CompletedGetApiV5PlacesGet) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/places"];

    //process optional query parameters
    [APIHelper appendUrl: _queryBuilder withQueryParameters: @{
                    @"latitude": [NSNumber numberWithDouble: latitude],
                    @"longitude": [NSNumber numberWithDouble: longitude],
                    @"type": type,
                    @"lang": lang
                }];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
*   # URL         => /places/categories
*   # Method      => GET
*   # Description => return categories
*   #==Parameters
*   # headers['X-Authentication-Token']
*   # headers['X-Session-Id']
*   # headers['X-App-Id']
*   #==Response/JSON
*   # { categories: {} }, status: :ok
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @param    xAppId    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5PlacesCategoriesGetAsyncWithXSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                xAppId:(NSString*) xAppId
                completionBlock:(CompletedGetApiV5PlacesCategoriesGet) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/places/categories"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken,
        @"X-App-Id": xAppId
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
* # URL         => /places/id
*   # Method      => GET
*   # Description => get details about some place      
*   #==Parameters
*   # headers['X-Authentication-Token']
*   # headers['X-Session-Id']
*   # headers['X-App-Id']
*   # params[:id] : place id you want to get details about  
*   # params[:source] : currently g for google and f for foursquare
*   # you should add app_id
*   #==Response/JSON
*   # { data: detailed data about specified place }, status: :ok
*   # returned data consists of
*   # formatted_address  
*   # formatted_phone_number
*   # international_phone_number
*   # photo_url : photo_url
* @param    source    Required parameter: Example: 
* @param    lang    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5PlacesChIJC7wXvkEWWBQRaULiE84DFEGetAsyncWithSource:(NSString*) source
                lang:(NSString*) lang
                completionBlock:(CompletedGetApiV5PlacesChIJC7wXvkEWWBQRaULiE84DFEGet) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/places/ChIJC7wXvkEWWBQRaULiE84-dFE"];

    //process optional query parameters
    [APIHelper appendUrl: _queryBuilder withQueryParameters: @{
                    @"source": source,
                    @"lang": lang
                }];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}


@end