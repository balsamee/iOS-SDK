//
//  BalsameeAPIs
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import "MeasurementsController.h"

@implementation MeasurementsController

/**
* # Specifications :-
* <b>URL : </b>/diabetes/add  
* <b>Method : </b>POST  
* # Parameters :-
* <b>Headers :</b>  
* 1- X-Authentication-Token  
* 2- X-Session-Id  
* 3- X-App-Id : should be sent only when using doctor app  
* <b>Params :</b>  
* -diabetes : String contains fields data in json (array) format  
* Ex: "[{ 'field_name': "" }]" --> string "[]" not json object/array  
* Each Object in the array consists of:  
* 1- field_name  
* 2- field_value  
* 3- date Or date_timestamp (with date_timestamp you don't need to send date field again in the relations array)  
* 4- relations => Array_of_relations  
* Every relation in the array consists of the same previous attributes/keys  
* ( date, field_name, field_value )  
* <b>Note in Pregnancy App</b>  
* "field_name" param possible values are => glucose, blood_pressure, weight  
* When the "field_name" value is glucose then the "field_name" value inside the relations will be  => "last meal", "activity"  
* The "last meal" "field_value" could be => Before Breakfast, After Breakfast, Before Lunch, After Lunch, At Fasting  
* The "activity"  "field_value" could be => No exercise, Light, Moderate, Heavy  
* # Response/JSON :-
* 1- {}, status: :ok  
* 2- {}, status: :unprocessable_entity
* @param    diabetes    Required parameter: Example: 
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @param    xAppId    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) createApiV5DiabetesAddPostAsyncWithDiabetes:(NSString*) diabetes
                xSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                xAppId:(NSString*) xAppId
                completionBlock:(CompletedPostApiV5DiabetesAddPost) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/diabetes/add"];

    //process optional query parameters
    [APIHelper appendUrl: _queryBuilder withQueryParameters: @{
                    @"diabetes": diabetes
                }];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken,
        @"X-App-Id": xAppId
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
* # Specifications :-
* <b>URL : </b>/diabetes/get_summary  
* <b>Method : </b>GET  
* # Parameters :-
* <b>Headers :</b>  
* 1- X-Authentication-Token  
* 2- X-Session-Id  
* 3- X-App-Id : should be sent only when using doctor app  
* # Response/JSON :-
* 1- <b>{measurements: Array_of_values}, status: :ok</b>  
* &nbsp;&nbsp;Every Value in the array (sorted by date) consists of:  
* &nbsp;&nbsp;1- created_at  
* &nbsp;&nbsp;2- date  
* &nbsp;&nbsp;3- date_timestamp  
* &nbsp;&nbsp;4- field_name  
* &nbsp;&nbsp;5- field_value  
* &nbsp;&nbsp;6- id  
* &nbsp;&nbsp;7- is_pmr  
* &nbsp;&nbsp;8- updated_at  
* &nbsp;&nbsp;9- user_id  
* &nbsp;&nbsp;10- relations   => Array_of_relations  
* &nbsp;&nbsp;&nbsp;&nbsp;Every relation in the array consists of the same previous attributes/keys  
* &nbsp;&nbsp;&nbsp;&nbsp;( created_at, date, field_name, field_value, id, is_pmr, updated_at, user_id )  
* 2- <b>{}, status: :unprocessable_entity</b>
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @param    xAppId    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5DiabetesGetSummaryGetAsyncWithXSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                xAppId:(NSString*) xAppId
                completionBlock:(CompletedGetApiV5DiabetesGetSummaryGet) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/diabetes/get_summary"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken,
        @"X-App-Id": xAppId
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
* # Specifications :-
* <b>URL : </b>/diabetes/get  
* <b>Method : </b>GET  
* <b>Description : </b>retrieve the corresponding diabetes info to the provided user with the diabetes type and build back the relations if it exists  
* # Parameters :-
* <b>Headers :</b>  
* 1- X-Authentication-Token  
* 2- X-Session-Id  
* 3- X-App-Id : should be sent only when using doctor app  
* <b>Params :</b>  
* 1- type  
* <b>Note in Pregnancy App</b>  
* "type" param possible values are => glucose, blood_pressure, weight
* # Response/JSON :-
* 1- <b>{measurements: Array_of_values}, status: :ok</b>  
* &nbsp;&nbsp;Every Value in the array (sorted by date) consists of:  
* &nbsp;&nbsp;1- created_at  
* &nbsp;&nbsp;2- date  
* &nbsp;&nbsp;3- date_timestamp  
* &nbsp;&nbsp;4- field_name  
* &nbsp;&nbsp;5- field_value  
* &nbsp;&nbsp;6- id  
* &nbsp;&nbsp;7- is_pmr  
* &nbsp;&nbsp;8- updated_at  
* &nbsp;&nbsp;9- user_id  
* &nbsp;&nbsp;10- relations   => Array_of_relations  
* &nbsp;&nbsp;&nbsp;&nbsp;Every relation in the array consists of the same previous attributes/keys  
* &nbsp;&nbsp;&nbsp;&nbsp;( created_at, date, field_name, field_value, id, is_pmr, updated_at, user_id )  
* 2- <b>{}, status: :unprocessable_entity</b>
* @param    type    Required parameter: Example: 
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @param    xAppId    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5DiabetesGetGetAsyncWithType:(NSString*) type
                xSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                xAppId:(NSString*) xAppId
                completionBlock:(CompletedGetApiV5DiabetesGetGet) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/diabetes/get"];

    //process optional query parameters
    [APIHelper appendUrl: _queryBuilder withQueryParameters: @{
                    @"type": type
                }];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken,
        @"X-App-Id": xAppId
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
* # Specifications :-
* <b>URL : </b>/diabetes/visualized_data  
* <b>Method : </b>POST  
* # Parameters :-
* <b>Headers :</b>  
* 1- X-Authentication-Token  
* 2- X-Session-Id  
* 3- X-App-Id : should be sent only when using doctor app  
* <b>Params :</b>  
* 1- send_email  
* 2- type  
* <b>Note in Pregnancy App</b>  
* "type" param possible values are => glucose, blood_pressure, weight  
* # Response/JSON :-
* 1- <b>{"message":"mail sent"}, status: :ok</b>  
* 2- <b>{:graph => graph_url, count: count}, status: :ok</b>  
* 3- <b>{}, status: :unprocessable_entity</b>  
* providing Graph to the matched requested diabetes info  
* Two cases will apply:  
* 1- if the request is to send email contains the graph url to some one provided in the request params e.g "send_email: bla@bla.bla"  
* 2- if the request is just to get the corresponding graph to the matched [type, user]  
* @param    sendEmail    Required parameter: Example: 
* @param    type    Required parameter: Example: 
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @param    xAppId    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) createApiV5DiabetesVisualizedDataPostAsyncWithSendEmail:(NSString*) sendEmail
                type:(NSString*) type
                xSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                xAppId:(NSString*) xAppId
                completionBlock:(CompletedPostApiV5DiabetesVisualizedDataPost) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/diabetes/visualized_data"];

    //process optional query parameters
    [APIHelper appendUrl: _queryBuilder withQueryParameters: @{
                    @"send_email": sendEmail,
                    @"type": type
                }];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken,
        @"X-App-Id": xAppId
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}


@end