//
//  BalsameeAPIs
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import "MessagesController.h"

@implementation MessagesController

/**
*  # URL         => /messages/get
*   # Method      => GET
*   # Description => Get List of Messages
*   #==Parameters
*   # range => represent the number of messages per page (default => 500)
*   # page  => page number (default => 1)
*   # email => curent user email
*   # authentication_token => curent user authentication_token (you get this token after login/registration)
*   #==Response/JSON
*   # {success: true , messages: array_of_messages}
*   # Every message in the array consists of:
*   # 1. date    => last reply date (Or message creation date if no replies)
*   # 2. date_unix_timestamp
*   # 3. id      => message id
*   # 4. title   => message title
*   # 5. is_seen => 1/0
*   # 6. is_sent => 1/0
*   # 7. Array_of_Users
*   #   Every user in the array consists of:
*   #     1. first_name
*   #     2. id
*   #     3. avatar => Object
*   #           {url: value , icon: {url: value},thumb: {url: value}, profile: {url: value}, profile_big: {url: value} }
*   # 8. last_reply => last reply on the message
*   #
*   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
*   # Errors:
*   #   1. UnauthorizedAccessError ( code: 401 )
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5MessagesGetGetAsyncWithXSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                completionBlock:(CompletedGetApiV5MessagesGetGet) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/messages/get"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
*  # URL         => /messages/get_replies
*   # Method      => GET
*   # Description => Get List of Message Replies
*   #==Parameters
*   # range      => represent the number of replies per page (default => 500)
*   # page       => page number (default => 1)
*   # message_id => id of the messages which the required replies belongs to
*   # email      => curent user email
*   # authentication_token => curent user authentication_token (you get this token after login/registration)
*   #==Response/JSON
*   # {success: true , replies: array_of_replies}
*   # array_of_replies => including the 'message' itself
*   # Every Reply in the array consists of:
*   # 1. date    => creation date
*   # 2. date_unix_timestamp
*   # 3. body    => reply/message content
*   # 4. id
*   # 5. user    => owner of the current reply/message
*   #     Object consists of:
*   #     1. full_name
*   #     2. id
*   #     3. avatar => Object
*   #           {url: value , icon: {url: value},thumb: {url: value}, profile: {url: value}, profile_big: {url: value} }
*   #
*   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
*   # Errors:
*   #   1. UnauthorizedAccessError ( code: 401 )
*   #   2. BadRequestError ( code: 400 )
*   #   3. NotFoundError   ( code: 404 )
* @param    messageId    Required parameter: Example: 
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5MessagesGetRepliesGetAsyncWithMessageId:(int) messageId
                xSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                completionBlock:(CompletedGetApiV5MessagesGetRepliesGet) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/messages/get_replies"];

    //process optional query parameters
    [APIHelper appendUrl: _queryBuilder withQueryParameters: @{
                    @"message_id": [NSNumber numberWithInteger: messageId]
                }];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
* # URL         => /messages/send_message
*   # Method      => POST
*   #==Parameters
*   # title
*   # body
*   # users_ids  => comma seperated ids of the receivers (ex: 256,10365)
*   # email      => curent user email
*   # authentication_token => curent user authentication_token (you get this token after login/registration)
*   #==Response/JSON
*   # { success: true }
*   #
*   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
*   # Errors:
*   #   1. UnauthorizedAccessError ( code: 401 )
*   #   2. BadRequestError         ( code: 400 )
*   #==Description
*   # this function send message to required receiver, in case many receivers => a different message
*   # will be created for each receiver (one to one)
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @param    title    Required parameter: Example: 
* @param    body    Required parameter: Example: 
* @param    usersIds    Required parameter: Example: 
* @param    attachment    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) createApiV5MessagesSendMessagePostAsyncWithXSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                title:(NSString*) title
                body:(NSString*) body
                usersIds:(NSString*) usersIds
                attachment:(NSString*) attachment
                completionBlock:(CompletedPostApiV5MessagesSendMessagePost) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/messages/send_message"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"title": title,
        @"body": body,
        @"users_ids": usersIds,
        @"attachment": attachment
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
* # URL       => /messages/send_reply
*   # Method    => POST
*   #==Parameters
*   # body       => reply content
*   # message_id => send reply to the message with that ID
*   # email      => curent user email
*   # authentication_token => curent user authentication_token (you get this token after login/registration)
*   #==Response/JSON
*   # { success: true }
*   #
*   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
*   # Errors:
*   #   1. UnauthorizedAccessError ( code: 401 )
*   #   2. BadRequestError         ( code: 400 )
*   #   3. ForbiddenError          ( code: 403 )
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @param    body    Required parameter: Example: 
* @param    messageId    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) createApiV5MessagesSendReplyPostAsyncWithXSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                body:(NSString*) body
                messageId:(NSString*) messageId
                completionBlock:(CompletedPostApiV5MessagesSendReplyPost) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/messages/send_reply"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"body": body,
        @"message_id": messageId
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
*  # URL         => /messages/search_users
*   # Method      => GET
*   # Description => Search for the users which you are able to send them messages
*   #                Staff to Staff and patients
*   #                Patients to Doctors
*   #                Doctors to Patients which have PMR access on them and vice versa
*   #==Parameters
*   # term  => search for a user with name contains this term/pattern
*   # range => (Optional) default range is 10
*   # email => curent user email
*   # authentication_token => curent user authentication_token (you get this token after login/registration)
*   #==Response/JSON
*   # {success: true , messages: array_of_users}
*   # Every user in the array consists of:
*   # 1. full_name    => user full name
*   # 2. id           => user id
*   # 3. avatar       => user images urls/ with different sizes
*   #     Object consists of:
*   #       {url: value , icon: {url: value},thumb: {url: value}, profile: {url: value}, profile_big: {url: value} }
*   #
*   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
*   # Errors:
*   #   1. UnauthorizedAccessError ( code: 401 )
*   #   2. BadRequestError         ( code: 400 )
* @param    term    Required parameter: Example: 
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5MessagesSearchUsersGetAsyncWithTerm:(NSString*) term
                xSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                completionBlock:(CompletedGetApiV5MessagesSearchUsersGet) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/messages/search_users"];

    //process optional query parameters
    [APIHelper appendUrl: _queryBuilder withQueryParameters: @{
                    @"term": term
                }];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}


@end