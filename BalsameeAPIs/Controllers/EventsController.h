//
//  BalsameeAPIs
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"

@interface EventsController : BaseController

/**
* Completion block definition for asynchronous call to ApiV5EventsEntitiesGet */
typedef void (^CompletedGetApiV5EventsEntitiesGet)(BOOL success, HttpContext* context, NSError* error);

/**
* Search for entities that have public events within next 30 days
* params
* 	- page => page number
* 	- per_page => number of rows you need per page, default: 10
* 	- type => the entity type ["Enterprise", "Clinic", "InsuranceCompany", "Hospital", "MedicalCenter", "Ngo", "Lab", "Pharmacy"] 
* 		"this is optional, if not specified it searches for all entity types with no restriction", this is in the url not query, events/:type/...
* 	- entity_name => the name of a specific entity
* @param    page    Required parameter: Example: 
* @param    entityName    Required parameter: Example: 
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
*/
- (void) getApiV5EventsEntitiesGetAsyncWithPage:(int) page
                entityName:(NSString*) entityName
                xSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                completionBlock:(CompletedGetApiV5EventsEntitiesGet) onCompleted;

/**
* Completion block definition for asynchronous call to ApiV5EventsSearchGet */
typedef void (^CompletedGetApiV5EventsSearchGet)(BOOL success, HttpContext* context, NSError* error);

/**
* Search for entities that have public events within next 30 days
* params
*   - page => page number
*   - per_page => number of rows you need per page, default: 10
*   - type => the entity type ["Enterprise", "Clinic", "InsuranceCompany", "Hospital", "MedicalCenter", "Ngo", "Lab", "Pharmacy"] 
*     "this is optional, if not specified it searches for all entity types with no restriction", this is in the url not query, events/:type/...
*   - entity_name => the name of a specific entity
* @param    page    Required parameter: Example: 
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
*/
- (void) getApiV5EventsSearchGetAsyncWithPage:(int) page
                xSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                completionBlock:(CompletedGetApiV5EventsSearchGet) onCompleted;

/**
* Completion block definition for asynchronous call to ApiV5EventsDoctorsGet */
typedef void (^CompletedGetApiV5EventsDoctorsGet)(BOOL success, HttpContext* context, NSError* error);

/**
* Search for doctors that have public events within next 30 days
* 	params
* 		- page => page number 
* 		- per_page => number of rows you need per page, default: 10 
* 		- doctor_name
* 		- doctor_spec
* 		- entity_id
* 		- 
* 		all params are optional, filter by any of them
* @param    page    Required parameter: Example: 
* @param    perPage    Required parameter: Example: 
* @param    entityId    Required parameter: Example: 
* @param    doctorName    Required parameter: Example: 
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
*/
- (void) getApiV5EventsDoctorsGetAsyncWithPage:(int) page
                perPage:(int) perPage
                entityId:(int) entityId
                doctorName:(NSString*) doctorName
                xSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                completionBlock:(CompletedGetApiV5EventsDoctorsGet) onCompleted;

/**
* Completion block definition for asynchronous call to ApiV5EventsGet */
typedef void (^CompletedGetApiV5EventsGet)(BOOL success, HttpContext* context, NSError* error);

/**
* TODO: Add Description
* @param    dateGrouped    Required parameter: Example: 
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
*/
- (void) getApiV5EventsGetAsyncWithDateGrouped:(BOOL) dateGrouped
                xSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                completionBlock:(CompletedGetApiV5EventsGet) onCompleted;

@end