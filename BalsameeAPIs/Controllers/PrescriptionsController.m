//
//  BalsameeAPIs
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import "PrescriptionsController.h"

@implementation PrescriptionsController

/**
* TODO: Add Description
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @param    prescriptionDate    Required parameter: Example: 
* @param    prescriptionPrescriber    Required parameter: Example: 
* @param    prescriptionPresDrugsAttributes0StartDate    Required parameter: Example: 
* @param    prescriptionPresDrugsAttributes0Num    Required parameter: Example: 
* @param    prescriptionPresDrugsAttributes0Duration    Required parameter: Example: 
* @param    prescriptionPresDrugsAttributes0DrugId    Required parameter: Example: 
* @param    prescriptionPresDrugsAttributes0Dose    Required parameter: Example: 
* @param    prescriptionPresDrugsAttributes0Notes    Required parameter: Example: 
* @param    prescriptionPresDrugsAttributes1461845708794StartDate    Required parameter: Example: 
* @param    prescriptionPresDrugsAttributes1461845708794Num    Required parameter: Example: 
* @param    prescriptionPresDrugsAttributes1461845708794Duration    Required parameter: Example: 
* @param    prescriptionPresDrugsAttributes1461845708794DrugId    Required parameter: Example: 
* @param    prescriptionPresDrugsAttributes1461845708794Dose    Required parameter: Example: 
* @param    prescriptionPresDrugsAttributes1461845708794Destroy    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) createApiV5PrescriptionsPostAsyncWithXSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                prescriptionDate:(NSString*) prescriptionDate
                prescriptionPrescriber:(NSString*) prescriptionPrescriber
                prescriptionPresDrugsAttributes0StartDate:(NSString*) prescriptionPresDrugsAttributes0StartDate
                prescriptionPresDrugsAttributes0Num:(NSString*) prescriptionPresDrugsAttributes0Num
                prescriptionPresDrugsAttributes0Duration:(NSString*) prescriptionPresDrugsAttributes0Duration
                prescriptionPresDrugsAttributes0DrugId:(NSString*) prescriptionPresDrugsAttributes0DrugId
                prescriptionPresDrugsAttributes0Dose:(NSString*) prescriptionPresDrugsAttributes0Dose
                prescriptionPresDrugsAttributes0Notes:(NSString*) prescriptionPresDrugsAttributes0Notes
                prescriptionPresDrugsAttributes1461845708794StartDate:(NSString*) prescriptionPresDrugsAttributes1461845708794StartDate
                prescriptionPresDrugsAttributes1461845708794Num:(NSString*) prescriptionPresDrugsAttributes1461845708794Num
                prescriptionPresDrugsAttributes1461845708794Duration:(NSString*) prescriptionPresDrugsAttributes1461845708794Duration
                prescriptionPresDrugsAttributes1461845708794DrugId:(NSString*) prescriptionPresDrugsAttributes1461845708794DrugId
                prescriptionPresDrugsAttributes1461845708794Dose:(NSString*) prescriptionPresDrugsAttributes1461845708794Dose
                prescriptionPresDrugsAttributes1461845708794Destroy:(NSString*) prescriptionPresDrugsAttributes1461845708794Destroy
                completionBlock:(CompletedPostApiV5PrescriptionsPost) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/prescriptions"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request parameters
    NSMutableDictionary* _parameters = [[NSMutableDictionary alloc] init];

    //load form parameters
    [_parameters addEntriesFromDictionary: @{
        @"prescription[date]": prescriptionDate,
        @"prescription[prescriber]": prescriptionPrescriber,
        @"prescription[pres_drugs_attributes][0][start_date]": prescriptionPresDrugsAttributes0StartDate,
        @"prescription[pres_drugs_attributes][0][num]": prescriptionPresDrugsAttributes0Num,
        @"prescription[pres_drugs_attributes][0][duration]": prescriptionPresDrugsAttributes0Duration,
        @"prescription[pres_drugs_attributes][0][drug_id]": prescriptionPresDrugsAttributes0DrugId,
        @"prescription[pres_drugs_attributes][0][dose]": prescriptionPresDrugsAttributes0Dose,
        @"prescription[pres_drugs_attributes][0][notes]": prescriptionPresDrugsAttributes0Notes,
        @"prescription[pres_drugs_attributes][1461845708794][start_date]": prescriptionPresDrugsAttributes1461845708794StartDate,
        @"prescription[pres_drugs_attributes][1461845708794][num]": prescriptionPresDrugsAttributes1461845708794Num,
        @"prescription[pres_drugs_attributes][1461845708794][duration]": prescriptionPresDrugsAttributes1461845708794Duration,
        @"prescription[pres_drugs_attributes][1461845708794][drug_id]": prescriptionPresDrugsAttributes1461845708794DrugId,
        @"prescription[pres_drugs_attributes][1461845708794][dose]": prescriptionPresDrugsAttributes1461845708794Dose,
        @"prescription[pres_drugs_attributes][1461845708794][_destroy]": prescriptionPresDrugsAttributes1461845708794Destroy
    }];

    //convert to form parameters
    _parameters = [APIHelper prepareParametersAsFormFields:_parameters];
    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: _parameters];


    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] post: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers
        [_request setParameters: _parameters]; //set request parameters

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
* TODO: Add Description
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5ReservationRequests4271PrescriptionsGetAsyncWithXSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                completionBlock:(CompletedGetApiV5ReservationRequests4271PrescriptionsGet) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/reservation_requests/4271/prescriptions"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
* TODO: Add Description
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5Prescriptions5a1bf82474617232620b0000GetAsyncWithXSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                completionBlock:(CompletedGetApiV5Prescriptions5a1bf82474617232620b0000Get) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/prescriptions/5a1bf82474617232620b0000"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
* TODO: Add Description
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5ReservationRequests46464634Prescriptions5a1bf82474617232620b0000GetAsyncWithXSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                completionBlock:(CompletedGetApiV5ReservationRequests46464634Prescriptions5a1bf82474617232620b0000Get) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/reservation_requests/46464634/prescriptions/5a1bf82474617232620b0000"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}

/**
* TODO: Add Description
* @param    xSessionId    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5PrescriptionsGetAsyncWithXSessionId:(NSString*) xSessionId
                xAuthenticationToken:(NSString*) xAuthenticationToken
                completionBlock:(CompletedGetApiV5PrescriptionsGet) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/prescriptions"];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Session-Id": xSessionId,
        @"X-Authentication-Token": xAuthenticationToken
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}


@end