//
//  BalsameeAPIs
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import "DoctorsController.h"

@implementation DoctorsController

/**
*   Get Doctors
*   This API by default did'nt include accepted doctor in the response  
*     
*   @params [Float] latitude  
*   @params [Float] longitude  
*   @param  [Integer] speciality_id  
*   @param  [Integer] career_level_id  
*   @return [JsonArray] doctors
*  
*   This API called if uer authenticated or not  
*   in case of authenticated user. send required authentication headers as below:  
*  
*  X-Authentication-Token  
*  X-Session-Id  
*  
* @param    latitude    Required parameter: Example: 
* @param    longitude    Required parameter: Example: 
* @param    specialityId    Required parameter: Example: 
* @param    careerLevelId    Required parameter: Example: 
* @param    limit    Required parameter: Example: 
* @param    xAuthenticationToken    Required parameter: Example: 
* @param    xSessionId    Required parameter: Example: 
* @return	Returns the void response from the API call */
- (void) getApiV5DoctorsGetAsyncWithLatitude:(double) latitude
                longitude:(double) longitude
                specialityId:(NSString*) specialityId
                careerLevelId:(NSString*) careerLevelId
                limit:(int) limit
                xAuthenticationToken:(NSString*) xAuthenticationToken
                xSessionId:(NSString*) xSessionId
                completionBlock:(CompletedGetApiV5DoctorsGet) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/doctors"];

    //process optional query parameters
    [APIHelper appendUrl: _queryBuilder withQueryParameters: @{
                    @"latitude": [NSNumber numberWithDouble: latitude],
                    @"longitude": [NSNumber numberWithDouble: longitude],
                    @"speciality_id": specialityId,
                    @"career_level_id": careerLevelId,
                    @"limit": [NSNumber numberWithInteger: limit]
                }];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"X-Authentication-Token": xAuthenticationToken,
        @"X-Session-Id": xSessionId
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, _statusError);
         }
         else
         {
             //return _response to API caller

             onCompleted(YES, _context, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, _error);
     }];
}


@end